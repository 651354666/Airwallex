"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var logger_1 = require("../logger");
// tslint:disable:no-console
/**
 * Generates console logs for significant operations.
 */
var ConsoleLogger = /** @class */ (function (_super) {
    __extends(ConsoleLogger, _super);
    function ConsoleLogger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Logs that mutations have completed.
     */
    ConsoleLogger.prototype.onComplete = function () {
        _super.prototype.onComplete.call(this);
        var fileMutations = this.getFileMutations();
        var filesCount = Object.keys(fileMutations).length;
        var mutationsCount = Object.keys(fileMutations)
            .map(function (fileName) { return fileMutations[fileName].length; })
            .reduce(function (a, b) { return a + b; }, 0);
        var wavesCount = this.getMutationsWaves().length;
        console.log([
            "Completed ",
            this.pluralize(mutationsCount, "mutation"),
            " across ",
            this.pluralize(filesCount, "file"),
            " in ",
            this.pluralize(wavesCount, "wave"),
            ".",
        ].join(""));
    };
    /**
     * Logs that an unknown mutator was requested.
     *
     * @param mutation   The requesting mutation of unknown type.
     */
    ConsoleLogger.prototype.onUnknownMutationType = function (mutation) {
        _super.prototype.onUnknownMutationType.call(this, mutation);
        console.error("Unknown mutator type: '" + mutation.type + "'");
    };
    /**
     * Displays a word and number, accounting for pluralization.
     *
     * @param count   How many of the word there are.
     * @param word   A word to display.
     */
    ConsoleLogger.prototype.pluralize = function (count, word) {
        return count === 1
            ? count + " " + word
            : count + " " + word + "s";
    };
    return ConsoleLogger;
}(logger_1.Logger));
exports.ConsoleLogger = ConsoleLogger;
// tslint:enable:no-console
//# sourceMappingURL=consoleLogger.js.map