import { Mutator } from "./mutator";
import { NameTransformer } from "./nameTransformer";
/**
 * Searches for mutator classes.
 */
export interface IMutatorSearcher {
    /**
     * Searches for a mutator sub-class within the directories.
     *
     * @param name   Dashed-case name of the mutator sub-class.
     * @returns The mutator sub-class, if it can be found.
     */
    search<TMutator extends Mutator>(name: string): IMutatorClass<TMutator> | undefined;
}
/**
 * Implementation of the IMutator interface.
 */
export interface IMutatorClass<TMutator extends Mutator> {
    /**
     * Initializes a new instance of the TMutator class.
     *
     * @param originalFileContents   Original contents of the file.
     */
    new (originalFileContents: string): TMutator;
}
/**
 * Searches for mutator classes.
 */
export declare class MutatorSearcher implements IMutatorSearcher {
    /**
     * Directories to search within.
     */
    private readonly directories;
    /**
     * Transforms dashed-case names to camelCase.
     */
    private readonly nameTransformer;
    /**
     * Initializes a new instance of the MutatorSearcher class.
     *
     * @param nameTransformer  Transforms dashed-case names to camelCase.
     * @param directories   Directories to search within.
     */
    constructor(directories: string[], nameTransformer?: NameTransformer);
    /**
     * Searches for a mutator sub-class within the directories.
     *
     * @param name   Dashed-case name of the mutator sub-class.
     * @returns The mutator sub-class, if it can be found.
     */
    search<TMutator extends Mutator>(name: string): IMutatorClass<TMutator> | undefined;
}
