import { ILogger } from "./logger";
import { IMutation } from "./mutation";
import { Mutator } from "./mutator";
import { IMutatorSearcher } from "./mutatorSearcher";
/**
 * Creates mutators for mutations.
 */
export interface IMutatorFactory {
    /**
     * Attempts to find and instantiate a mutator sub-class for a file.
     *
     * @param name   Dashed-case name of the mutator sub-class.
     * @param fileContents   Contents of the file.
     * @returns An instance of the mutator sub-class, if the sub-class can be found.
     */
    generate<TMutator extends Mutator>(name: string, fileContents: string): TMutator | undefined;
    /**
     * Generates and applies a mutator, if possible.
     *
     * @param fileContents   Contents of the file.
     * @param mutation   Mutation to be applied to the file.
     * @returns The mutated file contents.
     */
    generateAndApply(fileContents: string, mutation: IMutation): string;
}
/**
 * Creates mutators for mutations.
 */
export declare class MutatorFactory implements IMutatorFactory {
    /**
     * Mutator sub-classes, keyed by dashed-case name.
     */
    private readonly classes;
    /**
     * Generates output messages for significant operations.
     */
    private readonly logger;
    /**
     * Searches for mutator classes.
     */
    private readonly searcher;
    /**
     * Initializes a new instance of the MutatorFactory class.
     *
     * @param searcher   Searches for mutator classes.
     */
    constructor(mutatorSearcher: IMutatorSearcher, logger: ILogger);
    /**
     * Attempts to find and instantiate a mutator sub-class for a file.
     *
     * @param name   Dashed-case name of the mutator sub-class.
     * @param fileContents   Contents of the file.
     * @returns An instance of the mutator sub-class, if the sub-class can be found.
     */
    generate<TMutator extends Mutator>(name: string, fileContents: string): TMutator | undefined;
    /**
     * Generates and applied a mutator, if possible.
     *
     * @param fileContents   Contents of the file.
     * @param mutation   Mutation to be applied to the file.
     * @returns The mutated file contents.
     */
    generateAndApply(fileContents: string, mutation: IMutation): string;
}
