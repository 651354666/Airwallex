import { IFileProviderFactory } from "./fileProviderFactory";
import { ILogger } from "./logger";
import { IMutation } from "./mutation";
import { IFileMutations } from "./mutationsProvider";
import { IMutatorFactory } from "./mutatorFactory";
/**
 * Settings to initialize a new IMutationsApplier.
 */
export interface IMutationsApplierSettings {
    /**
     * Creates file providers for files.
     */
    fileProviderFactory: IFileProviderFactory;
    /**
     * Generates output messages for significant operations.
     */
    logger: ILogger;
    /**
     * Creates mutators for mutations.
     */
    mutatorFactory: IMutatorFactory;
}
/**
 * Applies individual waves of file mutations.
 */
export interface IMutationsApplier {
    /**
     * Applies an iteration of file mutations.
     *
     * @param mutations   Mutations to be applied to files.
     * @returns A Promise for the file mutations being applied.
     */
    apply(mutations: IFileMutations): Promise<void>;
    /**
     * Applies a file's mutations.
     *
     * @param fileName   Name of the file.
     * @param mutations   Mutations to be applied to the file.
     * @returns A Promise for the result of the file's mutations.
     */
    applyFileMutations(fileName: string, mutations: IMutation[]): Promise<string>;
}
/**
 * Applies individual waves of file mutations.
 */
export declare class MutationsApplier implements IMutationsApplier {
    /**
     * Creates file providers for files.
     */
    private readonly fileProviderFactory;
    /**
     * Generates output messages for significant operations.
     */
    private readonly logger;
    /**
     * Creates mutators for mutations.
     */
    private readonly mutatorFactory;
    /**
     * Initializes a new instance of the MutationsApplier class.
     *
     * @param settings   Settings to be used for initialization.
     */
    constructor(settings: IMutationsApplierSettings);
    /**
     * Applies an iteration of file mutations.
     *
     * @param mutations   Mutations to be applied to files.
     * @returns A Promise for the file mutations being applied.
     */
    apply(mutations: IFileMutations): Promise<void>;
    /**
     * Applies a file's mutations.
     *
     * @param fileName   Name of the file.
     * @param mutations   Mutations to be applied to the file.
     * @returns A Promise for the result of the file's mutations.
     */
    applyFileMutations(fileName: string, mutations: IMutation[]): Promise<string>;
    /**
     * Orders a set of mutations last-to-first, without overlaps.
     *
     * @param mutations   Mutations to be applied to a file.
     * @returns The mutations in last-to-first order, without overlaps.
     */
    private orderMutations(mutations);
}
