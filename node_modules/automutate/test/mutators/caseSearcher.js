"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var glob = require("glob");
var path = require("path");
var testCase_1 = require("./testCase");
/**
 * Finds test cases that should be run.
 */
var CaseSearcher = /** @class */ (function () {
    /**
     * Initializes a new instance of the CaseSearcher class.
     *
     * @param rootDirectory   Root directory to search for tests under.
     */
    function CaseSearcher(rootDirectory) {
        this.rootDirectory = rootDirectory;
    }
    /**
     * Searches for test cases under the root directory.
     *
     * @returns A Promise for test cases under the root directory.
     */
    CaseSearcher.prototype.search = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.readTestCases;
                        return [4 /*yield*/, this.findMutationFiles()];
                    case 1: return [4 /*yield*/, _a.apply(this, [_b.sent()])];
                    case 2: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /**
     * Finds full paths of mutation files under the root directory.
     *
     * @returns A Promise for mutation file paths under the root directory.
     */
    CaseSearcher.prototype.findMutationFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        glob(path.join(_this.rootDirectory, "**/mutations.json"), function (error, files) {
                            error ? reject(error) : resolve(files);
                        });
                    })];
            });
        });
    };
    /**
     * Reads test cases corresponding to mutation file paths.
     *
     * @param mutationFiles   Mutation file paths under the root directory.
     * @returns A Promise for test cases corresponding to the mutation file paths.
     */
    CaseSearcher.prototype.readTestCases = function (mutationFiles) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(mutationFiles
                        .map(function (mutationFile) {
                        return _this.readTestCase(path.dirname(mutationFile));
                    }))];
            });
        });
    };
    /**
     * Reads a test case corresponding to a mutation file path.
     *
     * @param mutationFiles   Mutation file path under the root directory.
     * @returns A Promise for the test case corresponding to the mutation file path.
     */
    CaseSearcher.prototype.readTestCase = function (directory) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, after, before, mutations, directorySplit, directoryPath, name;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.readFile(path.join(directory, "after.txt")),
                            this.readFile(path.join(directory, "before.txt")),
                            this.readFile(path.join(directory, "mutations.json")).then(JSON.parse)
                        ])];
                    case 1:
                        _a = _b.sent(), after = _a[0], before = _a[1], mutations = _a[2];
                        directorySplit = directory
                            .substring(directory.indexOf(testCase_1.casesRoot))
                            .split(/\\|\//g);
                        directoryPath = directorySplit.slice(0, directorySplit.length - 1);
                        name = directorySplit[directorySplit.length - 1];
                        return [2 /*return*/, { after: after, before: before, directoryPath: directoryPath, mutations: mutations, name: name }];
                }
            });
        });
    };
    /**
     * Reads a file from disk.
     *
     * @param fileName   Name of the file.
     * @returns A Promise for the contents of the file.
     */
    CaseSearcher.prototype.readFile = function (fileName) {
        return new Promise(function (resolve, reject) {
            fs.readFile(fileName, function (error, data) {
                error ? reject(error) : resolve(data.toString());
            });
        });
    };
    return CaseSearcher;
}());
exports.CaseSearcher = CaseSearcher;
//# sourceMappingURL=caseSearcher.js.map