"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var keepUnitMessage = "should not be omitted";
/**
 * Adds fix suggestions for the zero_unit rule.
 */
var ZeroUnitSuggester = /** @class */ (function () {
    function ZeroUnitSuggester() {
    }
    /**
     * Suggests a mutation to fix a complaint.
     *
     * @param complaint   Complaint result from running Lesshint.
     * @param config   Configuration options for the rule.
     * @param fileInfo   Contents of the source file in various forms.
     * @returns Suggested mutation for the fix.
     */
    ZeroUnitSuggester.prototype.suggestMutation = function (complaint, config, fileInfo) {
        return (config.style === "keep_unit" || complaint.message.indexOf(keepUnitMessage) !== -1)
            ? this.suggestKeepUnitMutation(complaint, fileInfo.text)
            : this.suggestNoUnitMutation(complaint);
    };
    /**
     * Suggests a mutation to fix a complaint that units should be kept.
     *
     * @param complaint   Complaint result from running Lesshint.
     * @param text   The file's original text.
     * @returns Suggested mutation for the fix.
     */
    ZeroUnitSuggester.prototype.suggestKeepUnitMutation = function (complaint, text) {
        var source = complaint.source;
        var insertion = source.replace(/0([\s;\r\n}])/g, "0px$1");
        var begin = text.lastIndexOf(source, complaint.position);
        return {
            insertion: insertion,
            range: {
                begin: begin,
                end: begin + source.length
            },
            type: "text-swap"
        };
    };
    /**
     * Suggests a mutation to fix a complaint that units should not be kept.
     *
     * @param complaint   Complaint result from running Lesshint.
     * @returns Suggested mutation for the fix.
     */
    ZeroUnitSuggester.prototype.suggestNoUnitMutation = function (complaint) {
        return {
            range: {
                begin: complaint.position + 1,
                end: complaint.position + complaint.source.indexOf(";", complaint.column) - complaint.column + 1
            },
            type: "text-delete"
        };
    };
    return ZeroUnitSuggester;
}());
exports.ZeroUnitSuggester = ZeroUnitSuggester;
//# sourceMappingURL=zeroUnitSuggester.js.map