"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var autoMutator_1 = require("automutate/lib/autoMutator");
var fs = require("fs");
var fileContentsGetter_1 = require("./fileContentsGetter");
var lesshintMutationsProvider_1 = require("./lesshintMutationsProvider");
var lesshintWaveReporter_1 = require("./lesshintWaveReporter");
/**
 * Parses config settings from a local file, if available.
 *
 * @param configFilePath   Path to a settings file, if available.
 * @returns A Promise for configuration settings.
 */
var getConfigSettings = function (configFilePath) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (configFilePath === undefined) {
            return [2 /*return*/, {}];
        }
        return [2 /*return*/, new Promise(function (resolve, reject) {
                fs.readFile(configFilePath, function (error, contents) {
                    error
                        ? resolve({})
                        : resolve(JSON.parse(contents.toString()));
                });
            })];
    });
}); };
/**
 * Runs autolesshint.
 */
var Runner = /** @class */ (function () {
    /**
     * Initializes a new instance of the Runner class.
     *
     * @param settings   Settings to run Autolesshint.
     */
    function Runner(settings) {
        this.settings = settings;
    }
    /**
     * Runs autolesshint.
     *
     * @returns A Promise for running autolesshint.
     */
    Runner.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var configs, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getConfigSettings(this.settings.config)];
                    case 1:
                        configs = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.runWithConfigs(configs)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        // tslint:disable-next-line:no-console
                        console.error("Error in autolesshint:", error_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Runs autolesshint with lesshint config settings.
     *
     * @param configs Lesshint configuration settings.
     * @returns A Promise for running autolesshint.
     */
    Runner.prototype.runWithConfigs = function (configs) {
        return __awaiter(this, void 0, void 0, function () {
            var waveReporter, autoMutator;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        waveReporter = new lesshintWaveReporter_1.LesshintWaveReporter(configs, fileContentsGetter_1.fileContentsGetter);
                        autoMutator = new autoMutator_1.AutoMutator({
                            mutationsProvider: new lesshintMutationsProvider_1.LesshintMutationsProvider(__assign({ reporter: waveReporter }, this.settings))
                        });
                        return [4 /*yield*/, autoMutator.run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Runner;
}());
exports.Runner = Runner;
//# sourceMappingURL=runner.js.map